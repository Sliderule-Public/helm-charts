apiVersion: apps/v1
kind: Deployment
metadata:
  name: shieldrule-web
spec:
  replicas: {{ .Values.web.count }}
  progressDeadlineSeconds: 1200
  selector:
    matchLabels:
      app: shieldrule-web
      role: shieldrule-web-role
  strategy: { }
  template:
    metadata:
      labels:
        app: shieldrule-web
        role: shieldrule-web-role
        {{- range $k, $v := .Values.web.labels }}
        {{ $k }}: {{ $v }}
        {{- end }}
    spec:
      {{ if .Values.service_account_role }}
      serviceAccountName: aws-role
      {{ end }}
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      initContainers:
        - name: volume-mount-hack
          imagePullPolicy: Always
          image: "{{ .Values.web_image_url }}:{{ .Values.SHIELDRULE_ENVIRONMENT }}"
          command: [ "sh", "-c", "cp -r /usr/share/nginx/html/* /usr/share/nginx/html_rw/ && cp ./nginx.eks.conf /etc/nginx/conf.d/default.conf" ]
          volumeMounts:
            - mountPath: /usr/share/nginx/html_rw
              name: shieldrule-web-nginx-html
            - mountPath: /etc/nginx/conf.d/
              name: shieldrule-web-nginx-config
      containers:
        - image: "{{ .Values.web_image_url }}:{{ .Values.SHIELDRULE_ENVIRONMENT }}"
          imagePullPolicy: Always
          command: [ "/bin/sh", "-c", "./load-env.sh /usr/share/nginx/html_rw/config.js && nginx -g \"daemon off;\"" ]
          name: shieldrule-web
          ports:
            - containerPort: 8000
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            timeoutSeconds: 10
            initialDelaySeconds: 90
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            timeoutSeconds: 10
            initialDelaySeconds: 90
            successThreshold: 3
          resources:
            requests:
              memory: {{ .Values.web.resources.requests.memory }}
              cpu: {{ .Values.web.resources.requests.cpu }}
            limits:
              memory: {{ .Values.web.resources.limits.memory }}
              cpu: {{ .Values.web.resources.limits.cpu }}
          securityContext:
            capabilities:
              drop:
                - all
          volumeMounts:
            - mountPath: /var/cache/nginx
              name: shieldrule-web-nginx-cache
            - mountPath: /usr/share/nginx/html_rw
              name: shieldrule-web-nginx-html
            - mountPath: /etc/nginx/conf.d/
              name: shieldrule-web-nginx-config
          envFrom:
            - secretRef:
                name: terraform-secret
            - secretRef:
                name: sliderule-secret
      restartPolicy: Always
      volumes:
        - emptyDir: { }
          name: shieldrule-web-nginx-cache
        - emptyDir: { }
          name: shieldrule-web-nginx-config
        - emptyDir: { }
          name: shieldrule-web-nginx-html
status: { }